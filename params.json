{"name":"DFCache","tagline":"Composite LRU cache with fast metadata on top of UNIX extended file attributes.","body":"# About DFCache \r\n[![Build Status](https://travis-ci.org/kean/DFCache.svg?branch=master)](https://travis-ci.org/kean/DFCache)\r\n\r\nDFCache is an iOS and OS X library that provides composite in-memory and on-disk cache with LRU cleanup. It is implemented as a set of reusable classes with concise and extensible API.\r\n\r\n\r\n\r\n### Key Features\r\n - Thoroughly tested and well-documented.\r\n - LRU cleanup (discards least recently used items first).\r\n - Metadata implemented on top on UNIX extended file attributes.\r\n - Encoding and decoding implemented using blocks. Store any kind of Objective-C objects or manipulate data directly.\r\n - First class `UIImage` support including background image decompression.\r\n - Batch methods to retrieve cached entries.\r\n\r\n### Requirements\r\n- iOS 6.0 or OS X 10.8\r\n\r\n### NSCache on iOS 7.0\r\n`NSCache` auto-removal policies have change with the release of iOS 7.0. Make sure that you use reasonable total cost limit or count limit. Or else `NSCache` won't be able to evict memory properly. Typically, the obvious cost is the size of the object in bytes. Keep in mind that `DFCache` automatically removes all object from memory cache on memory warning for you.\r\n\r\n# Classes\r\n|Class|Description|\r\n|---------|---------|\r\n|[DFCache](https://github.com/kean/DFCache/blob/master/DFCache/DFCache.h)|Asynchronous composite in-memory and on-disk cache with LRU cleanup. Uses `NSCache` for in-memory caching and `DFDiskCache` for on-disk caching. Provides API for associating metadata with cache entries.|\r\n|[DFCache (DFImage)](https://github.com/kean/DFCache/blob/master/DFCache/DFCache%2BDFImage.h)|First class UIImage support including background image decompression.|\r\n|[DFCache (DFCacheExtended)](https://github.com/kean/DFCache/blob/master/DFCache/DFCache%2BDFExtensions.h)|Set of methods that extend `DFCache` functionality by allowing you to retrieve cached entries in batches.|\r\n|[DFFileStorage](https://github.com/kean/DFCache/blob/master/DFCache/Key-Value%20File%20Storage/DFFileStorage.h)|Key-value file storage.|\r\n|[DFDiskCache](https://github.com/kean/DFCache/blob/master/DFCache/DFDiskCache.h)|Disk cache extends file storage functionality by providing LRU (least recently used) cleanup.|\r\n|[NSURL (DFExtendedFileAttributes)](https://github.com/kean/DFCache/blob/master/DFCache/Extended%20File%20Attributes/NSURL%2BDFExtendedFileAttributes.h)|Objective-c wrapper of UNIX extended file attributes. Extended attributes extend the basic attributes associated with files and directories in the file system. They are stored as name:data pairs associated with file system objects (files, directories, symlinks, etc). See setxattr(2).|\r\n\r\n# Usage\r\n\r\n### DFCache\r\n\r\n#### Store, retrieve and remove JSON\r\n```objective-c\r\nDFCache *cache = [[DFCache alloc] initWithName:@\"sample_cache\"];\r\nNSString *key = @\"http://...\"; // Key can by any arbitrary string.\r\nNSData *data = ...; // Original JSON data.\r\nid JSON = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:nil];\r\n\r\n// Store object into memory cache and data into disk cache.\r\n[cache storeObject:JSON data:data forKey:key];\r\n\r\n// Retrieve object be decoding it using built-in DFCacheDecodeJSON block.\r\n[cache cachedObjectForKey:key decode:DFCacheDecodeJSON completion:^(id object) {\r\n    // All disk IO operations are run on serial dispatch queue\r\n    // which guarantees that the object is retrieved successfully.\r\n    NSLog(@\"Did retrieve cached object %@\", object);\r\n}];\r\n\r\n[cache removeObjectForKey:key];\r\n```\r\n\r\n#### Set and read metadata\r\n```objective-c\r\nDFCache *cache = [[DFCache alloc] initWithName:@\"sample_cache\"];\r\nNSDictionary *object = @{ @\"key\" : @\"value\" };\r\n[cache storeObject:object encode:DFCacheDecodeNSCoding forKey:@\"key\"];\r\n[cache setMetadata:@{ @\"revalidation_date\" : [NSDate date] } forKey:@\"key\"];\r\nNSDictionary *metadata = [cache metadataForKey:@\"key\"];\r\n```\r\n\r\n### DFCache (DFCacheExtended)\r\n\r\n#### Retrieve batch of objects\r\n```objective-c\r\nDFCache *cache = ...;\r\n[cache batchCachedObjectsForKeys:keys decode:DFCacheDecodeNSCoding cost:nil completion:^(NSDictionary *batch) {\r\n    for (NSString *key in keys) {\r\n        id object = batch[key];\r\n        // Do something with object.\r\n    }\r\n}];\r\n```\r\n\r\n### DFFileStorage\r\n\r\n#### Write and read data\r\n```objective-c\r\nDFFileStorage *storage = [[DFFileStorage alloc] initWithPath:path error:nil];\r\n[storage setData:data forKey:@\"key\"];\r\n[storage dataForKey:@\"key\"];\r\n```\r\n\r\n#### Enumerate contents\r\n```objective-c\r\nDFFileStorage *storage = [[DFFileStorage alloc] initWithPath:path error:nil];\r\nNSArray *resourceKeys = @[ NSURLContentModificationDateKey, NSURLFileAllocatedSizeKey ];\r\nNSArray *contents = [storage contentsWithResourceKeys:resourceKeys];\r\nfor (NSURL *fileURL in contents) {\r\n    // Use file URL and pre-fetched file attributes. \r\n}\r\n```\r\n\r\n### NSURL (DFExtendedFileAttributes)\r\n\r\n#### Set and read extended file attribute.\r\n```objective-c\r\nNSURL *fileURL = [NSURL fileURLWithPath:path];\r\n[fileURL setExtendedAttributeValue:@\"value\" forKey:@\"attr_key\"];\r\nNSString *value = [fileURL extendedAttributeValueForKey:@\"attr_key\" error:NULL];\r\n```\r\n\r\n# Installation\r\n\r\n### Cocoapods\r\nThe recommended way to install `DFCache` is via [Cocoapods](http://cocoapods.org) package manager.\r\n```ruby\r\n# Podfile example\r\nplatform :ios, '6.0'\r\n# platform :osx, '10.8'\r\npod 'DFCache', '~> 1.0'\r\n```\r\n\r\n# Contacts\r\n[Alexander Grebenyuk](https://github.com/kean)\r\n\r\n# License\r\nDFCache is available under the MIT license. See the LICENSE file for more info.","google":"UA-49849401-1","note":"Don't delete this file! It's used internally to help with page regeneration."}